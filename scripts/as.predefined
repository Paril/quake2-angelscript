// shared stuff

namespace double_limits
{
	// properties
	const int32 digits;
	const int32 digits10;
	const int32 max_digits10;
	const double min;
	const double lowest;
	const double max;
	const double epsilon;
	const double round_error;
	const double infinity;
	const double quiet_NaN;
	const double signaling_NaN;
	const double denorm_min;
	const int32 min_exponent;
	const int32 min_exponent10;
	const int32 max_exponent;
	const int32 max_exponent10;
}
namespace float_limits
{
	// properties
	const int32 digits;
	const int32 digits10;
	const int32 max_digits10;
	const float min;
	const float lowest;
	const float max;
	const float epsilon;
	const float round_error;
	const float infinity;
	const float quiet_NaN;
	const float signaling_NaN;
	const float denorm_min;
	const int32 min_exponent;
	const int32 min_exponent10;
	const int32 max_exponent;
	const int32 max_exponent10;
}
namespace int16_limits
{
	// properties
	const int32 digits;
	const int32 digits10;
	const int32 max_digits10;
	const int16 min;
	const int16 lowest;
	const int16 max;
}
namespace int32_limits
{
	// properties
	const int32 digits;
	const int32 digits10;
	const int32 max_digits10;
	const int32 min;
	const int32 lowest;
	const int32 max;
}
namespace int64_limits
{
	// properties
	const int32 digits;
	const int32 digits10;
	const int32 max_digits10;
	const int64 min;
	const int64 lowest;
	const int64 max;
}
namespace int8_limits
{
	// properties
	const int32 digits;
	const int32 digits10;
	const int32 max_digits10;
	const int8 min;
	const int8 lowest;
	const int8 max;
}
namespace uint16_limits
{
	// properties
	const int32 digits;
	const int32 digits10;
	const int32 max_digits10;
	const uint16 min;
	const uint16 lowest;
	const uint16 max;
}
namespace uint32_limits
{
	// properties
	const int32 digits;
	const int32 digits10;
	const int32 max_digits10;
	const uint32 min;
	const uint32 lowest;
	const uint32 max;
}
namespace uint64_limits
{
	// properties
	const int32 digits;
	const int32 digits10;
	const int32 max_digits10;
	const uint64 min;
	const uint64 lowest;
	const uint64 max;
}
namespace uint8_limits
{
	// properties
	const int32 digits;
	const int32 digits10;
	const int32 max_digits10;
	const uint8 min;
	const uint8 lowest;
	const uint8 max;
}
// enums
enum timeunit_t : int32
{
	ms = 0,
	sec = 1,
	min = 2,
	hz = 3
}
enum cvar_flags_t : int32
{
	NOFLAGS = 0,
	ARCHIVE = 1,
	USERINFO = 2,
	SERVERINFO = 4,
	NOSET = 8,
	LATCH = 16,
	USER_PROFILE = 32
}
enum contents_t : int32
{
	NONE = 0,
	SOLID = 1,
	WINDOW = 2,
	AUX = 4,
	LAVA = 8,
	SLIME = 16,
	WATER = 32,
	MIST = 64,
	NO_WATERJUMP = 8192,
	PROJECTILECLIP = 16384,
	AREAPORTAL = 32768,
	PLAYERCLIP = 65536,
	MONSTERCLIP = 131072,
	CURRENT_0 = 262144,
	CURRENT_90 = 524288,
	CURRENT_180 = 1048576,
	CURRENT_270 = 2097152,
	CURRENT_UP = 4194304,
	CURRENT_DOWN = 8388608,
	ORIGIN = 16777216,
	MONSTER = 33554432,
	DEADMONSTER = 67108864,
	DETAIL = 134217728,
	TRANSLUCENT = 268435456,
	LADDER = 536870912,
	PLAYER = 1073741824,
	PROJECTILE = 2147483648,
	MASK_ALL = 4294967295,
	MASK_SOLID = 3,
	MASK_PLAYERSOLID = 1107361795,
	MASK_DEADSOLID = 65539,
	MASK_MONSTERSOLID = 1107427331,
	MASK_WATER = 56,
	MASK_OPAQUE = 25,
	MASK_SHOT = 1174405123,
	MASK_CURRENT = 16515072,
	MASK_BLOCK_SIGHT = 1107296281,
	MASK_NAV_SOLID = 65539,
	MASK_LADDER_NAV_SOLID = 3,
	MASK_WALK_NAV_SOLID = 196611,
	MASK_PROJECTILE = 1174421507
}
enum surfflags_t : int32
{
	NONE = 0,
	LIGHT = 1,
	SLICK = 2,
	SKY = 4,
	WARP = 8,
	TRANS33 = 16,
	TRANS66 = 32,
	FLOWING = 64,
	NODRAW = 128,
	ALPHATEST = 33554432,
	N64_UV = 268435456,
	N64_SCROLL_X = 536870912,
	N64_SCROLL_Y = 1073741824,
	N64_SCROLL_FLIP = 2147483648
}
enum refdef_flags_t : uint8
{
	NONE = 0,
	UNDERWATER = 1,
	NOWORLDMODEL = 2,
	IRGOGGLES = 4,
	UVGOGGLES = 8,
	NO_WEAPON_LERP = 16
}
enum pmtype_t : int32
{
	NORMAL = 0,
	GRAPPLE = 1,
	NOCLIP = 2,
	SPECTATOR = 3,
	DEAD = 4,
	GIB = 5,
	FREEZE = 6
}
enum pmflags_t : uint16
{
	NONE = 0,
	DUCKED = 1,
	JUMP_HELD = 2,
	ON_GROUND = 4,
	TIME_WATERJUMP = 8,
	TIME_LAND = 16,
	TIME_TELEPORT = 32,
	NO_POSITIONAL_PREDICTION = 64,
	ON_LADDER = 128,
	NO_ANGULAR_PREDICTION = 256,
	IGNORE_PLAYER_COLLISION = 512,
	TIME_TRICK = 1024,
	NO_GROUND_SEEK = 2048
}
enum button_t : uint8
{
	NONE = 0,
	ATTACK = 1,
	USE = 2,
	HOLSTER = 4,
	JUMP = 8,
	CROUCH = 16,
	ANY = 128
}
enum water_level_t : uint8
{
	NONE = 0,
	FEET = 1,
	WAIST = 2,
	UNDER = 3
}
enum configstring_id_t : int32
{
	NAME = 0,
	CDTRACK = 1,
	SKY = 2,
	SKYAXIS = 3,
	SKYROTATE = 4,
	STATUSBAR = 5,
	AIRACCEL = 59,
	MAXCLIENTS = 60,
	MAPCHECKSUM = 61,
	MODELS = 62,
	SOUNDS = 8254,
	IMAGES = 10302,
	LIGHTS = 10814,
	SHADOWLIGHTS = 11070,
	ITEMS = 11326,
	PLAYERSKINS = 11582,
	GENERAL = 11838,
	WHEEL_WEAPONS = 12350,
	WHEEL_AMMO = 12382,
	WHEEL_POWERUPS = 12414,
	CD_LOOP_COUNT = 12446,
	GAME_STYLE = 12447,
	MAX_CONFIGSTRINGS = 12448
}
enum configstring_old_id_t : int32
{
	NAME_OLD = 0,
	CDTRACK_OLD = 1,
	SKY_OLD = 2,
	SKYAXIS_OLD = 3,
	SKYROTATE_OLD = 4,
	STATUSBAR_OLD = 5,
	AIRACCEL_OLD = 29,
	MAXCLIENTS_OLD = 30,
	MAPCHECKSUM_OLD = 31,
	MODELS_OLD = 32,
	SOUNDS_OLD = 288,
	IMAGES_OLD = 544,
	LIGHTS_OLD = 800,
	ITEMS_OLD = 1056,
	PLAYERSKINS_OLD = 1312,
	GENERAL_OLD = 1568,
	MAX_CONFIGSTRINGS_OLD = 2080
}
enum layout_flags_t : int16
{
	NONE = 0,
	LAYOUT = 1,
	INVENTORY = 2,
	HIDE_HUD = 4,
	INTERMISSION = 8,
	HELP = 16,
	HIDE_CROSSHAIR = 32
}
enum monster_muzzle_t : int32
{
	UNUSED_0 = 0,
	TANK_BLASTER_1 = 1,
	TANK_BLASTER_2 = 2,
	TANK_BLASTER_3 = 3,
	TANK_MACHINEGUN_1 = 4,
	TANK_MACHINEGUN_2 = 5,
	TANK_MACHINEGUN_3 = 6,
	TANK_MACHINEGUN_4 = 7,
	TANK_MACHINEGUN_5 = 8,
	TANK_MACHINEGUN_6 = 9,
	TANK_MACHINEGUN_7 = 10,
	TANK_MACHINEGUN_8 = 11,
	TANK_MACHINEGUN_9 = 12,
	TANK_MACHINEGUN_10 = 13,
	TANK_MACHINEGUN_11 = 14,
	TANK_MACHINEGUN_12 = 15,
	TANK_MACHINEGUN_13 = 16,
	TANK_MACHINEGUN_14 = 17,
	TANK_MACHINEGUN_15 = 18,
	TANK_MACHINEGUN_16 = 19,
	TANK_MACHINEGUN_17 = 20,
	TANK_MACHINEGUN_18 = 21,
	TANK_MACHINEGUN_19 = 22,
	TANK_ROCKET_1 = 23,
	TANK_ROCKET_2 = 24,
	TANK_ROCKET_3 = 25,
	INFANTRY_MACHINEGUN_1 = 26,
	INFANTRY_MACHINEGUN_2 = 27,
	INFANTRY_MACHINEGUN_3 = 28,
	INFANTRY_MACHINEGUN_4 = 29,
	INFANTRY_MACHINEGUN_5 = 30,
	INFANTRY_MACHINEGUN_6 = 31,
	INFANTRY_MACHINEGUN_7 = 32,
	INFANTRY_MACHINEGUN_8 = 33,
	INFANTRY_MACHINEGUN_9 = 34,
	INFANTRY_MACHINEGUN_10 = 35,
	INFANTRY_MACHINEGUN_11 = 36,
	INFANTRY_MACHINEGUN_12 = 37,
	INFANTRY_MACHINEGUN_13 = 38,
	SOLDIER_BLASTER_1 = 39,
	SOLDIER_BLASTER_2 = 40,
	SOLDIER_SHOTGUN_1 = 41,
	SOLDIER_SHOTGUN_2 = 42,
	SOLDIER_MACHINEGUN_1 = 43,
	SOLDIER_MACHINEGUN_2 = 44,
	GUNNER_MACHINEGUN_1 = 45,
	GUNNER_MACHINEGUN_2 = 46,
	GUNNER_MACHINEGUN_3 = 47,
	GUNNER_MACHINEGUN_4 = 48,
	GUNNER_MACHINEGUN_5 = 49,
	GUNNER_MACHINEGUN_6 = 50,
	GUNNER_MACHINEGUN_7 = 51,
	GUNNER_MACHINEGUN_8 = 52,
	GUNNER_GRENADE_1 = 53,
	GUNNER_GRENADE_2 = 54,
	GUNNER_GRENADE_3 = 55,
	GUNNER_GRENADE_4 = 56,
	CHICK_ROCKET_1 = 57,
	FLYER_BLASTER_1 = 58,
	FLYER_BLASTER_2 = 59,
	MEDIC_BLASTER_1 = 60,
	GLADIATOR_RAILGUN_1 = 61,
	HOVER_BLASTER_1 = 62,
	ACTOR_MACHINEGUN_1 = 63,
	SUPERTANK_MACHINEGUN_1 = 64,
	SUPERTANK_MACHINEGUN_2 = 65,
	SUPERTANK_MACHINEGUN_3 = 66,
	SUPERTANK_MACHINEGUN_4 = 67,
	SUPERTANK_MACHINEGUN_5 = 68,
	SUPERTANK_MACHINEGUN_6 = 69,
	SUPERTANK_ROCKET_1 = 70,
	SUPERTANK_ROCKET_2 = 71,
	SUPERTANK_ROCKET_3 = 72,
	BOSS2_MACHINEGUN_L1 = 73,
	BOSS2_MACHINEGUN_L2 = 74,
	BOSS2_MACHINEGUN_L3 = 75,
	BOSS2_MACHINEGUN_L4 = 76,
	BOSS2_MACHINEGUN_L5 = 77,
	BOSS2_ROCKET_1 = 78,
	BOSS2_ROCKET_2 = 79,
	BOSS2_ROCKET_3 = 80,
	BOSS2_ROCKET_4 = 81,
	FLOAT_BLASTER_1 = 82,
	SOLDIER_BLASTER_3 = 83,
	SOLDIER_SHOTGUN_3 = 84,
	SOLDIER_MACHINEGUN_3 = 85,
	SOLDIER_BLASTER_4 = 86,
	SOLDIER_SHOTGUN_4 = 87,
	SOLDIER_MACHINEGUN_4 = 88,
	SOLDIER_BLASTER_5 = 89,
	SOLDIER_SHOTGUN_5 = 90,
	SOLDIER_MACHINEGUN_5 = 91,
	SOLDIER_BLASTER_6 = 92,
	SOLDIER_SHOTGUN_6 = 93,
	SOLDIER_MACHINEGUN_6 = 94,
	SOLDIER_BLASTER_7 = 95,
	SOLDIER_SHOTGUN_7 = 96,
	SOLDIER_MACHINEGUN_7 = 97,
	SOLDIER_BLASTER_8 = 98,
	SOLDIER_SHOTGUN_8 = 99,
	SOLDIER_MACHINEGUN_8 = 100,
	MAKRON_BFG = 101,
	MAKRON_BLASTER_1 = 102,
	MAKRON_BLASTER_2 = 103,
	MAKRON_BLASTER_3 = 104,
	MAKRON_BLASTER_4 = 105,
	MAKRON_BLASTER_5 = 106,
	MAKRON_BLASTER_6 = 107,
	MAKRON_BLASTER_7 = 108,
	MAKRON_BLASTER_8 = 109,
	MAKRON_BLASTER_9 = 110,
	MAKRON_BLASTER_10 = 111,
	MAKRON_BLASTER_11 = 112,
	MAKRON_BLASTER_12 = 113,
	MAKRON_BLASTER_13 = 114,
	MAKRON_BLASTER_14 = 115,
	MAKRON_BLASTER_15 = 116,
	MAKRON_BLASTER_16 = 117,
	MAKRON_BLASTER_17 = 118,
	MAKRON_RAILGUN_1 = 119,
	JORG_MACHINEGUN_L1 = 120,
	JORG_MACHINEGUN_L2 = 121,
	JORG_MACHINEGUN_L3 = 122,
	JORG_MACHINEGUN_L4 = 123,
	JORG_MACHINEGUN_L5 = 124,
	JORG_MACHINEGUN_L6 = 125,
	JORG_MACHINEGUN_R1 = 126,
	JORG_MACHINEGUN_R2 = 127,
	JORG_MACHINEGUN_R3 = 128,
	JORG_MACHINEGUN_R4 = 129,
	JORG_MACHINEGUN_R5 = 130,
	JORG_MACHINEGUN_R6 = 131,
	JORG_BFG_1 = 132,
	BOSS2_MACHINEGUN_R1 = 133,
	BOSS2_MACHINEGUN_R2 = 134,
	BOSS2_MACHINEGUN_R3 = 135,
	BOSS2_MACHINEGUN_R4 = 136,
	BOSS2_MACHINEGUN_R5 = 137,
	CARRIER_MACHINEGUN_L1 = 138,
	CARRIER_MACHINEGUN_R1 = 139,
	CARRIER_GRENADE = 140,
	TURRET_MACHINEGUN = 141,
	TURRET_ROCKET = 142,
	TURRET_BLASTER = 143,
	STALKER_BLASTER = 144,
	DAEDALUS_BLASTER = 145,
	MEDIC_BLASTER_2 = 146,
	CARRIER_RAILGUN = 147,
	WIDOW_DISRUPTOR = 148,
	WIDOW_BLASTER = 149,
	WIDOW_RAIL = 150,
	WIDOW_PLASMABEAM = 151,
	CARRIER_MACHINEGUN_L2 = 152,
	CARRIER_MACHINEGUN_R2 = 153,
	WIDOW_RAIL_LEFT = 154,
	WIDOW_RAIL_RIGHT = 155,
	WIDOW_BLASTER_SWEEP1 = 156,
	WIDOW_BLASTER_SWEEP2 = 157,
	WIDOW_BLASTER_SWEEP3 = 158,
	WIDOW_BLASTER_SWEEP4 = 159,
	WIDOW_BLASTER_SWEEP5 = 160,
	WIDOW_BLASTER_SWEEP6 = 161,
	WIDOW_BLASTER_SWEEP7 = 162,
	WIDOW_BLASTER_SWEEP8 = 163,
	WIDOW_BLASTER_SWEEP9 = 164,
	WIDOW_BLASTER_100 = 165,
	WIDOW_BLASTER_90 = 166,
	WIDOW_BLASTER_80 = 167,
	WIDOW_BLASTER_70 = 168,
	WIDOW_BLASTER_60 = 169,
	WIDOW_BLASTER_50 = 170,
	WIDOW_BLASTER_40 = 171,
	WIDOW_BLASTER_30 = 172,
	WIDOW_BLASTER_20 = 173,
	WIDOW_BLASTER_10 = 174,
	WIDOW_BLASTER_0 = 175,
	WIDOW_BLASTER_10L = 176,
	WIDOW_BLASTER_20L = 177,
	WIDOW_BLASTER_30L = 178,
	WIDOW_BLASTER_40L = 179,
	WIDOW_BLASTER_50L = 180,
	WIDOW_BLASTER_60L = 181,
	WIDOW_BLASTER_70L = 182,
	WIDOW_RUN_1 = 183,
	WIDOW_RUN_2 = 184,
	WIDOW_RUN_3 = 185,
	WIDOW_RUN_4 = 186,
	WIDOW_RUN_5 = 187,
	WIDOW_RUN_6 = 188,
	WIDOW_RUN_7 = 189,
	WIDOW_RUN_8 = 190,
	CARRIER_ROCKET_1 = 191,
	CARRIER_ROCKET_2 = 192,
	CARRIER_ROCKET_3 = 193,
	CARRIER_ROCKET_4 = 194,
	WIDOW2_BEAMER_1 = 195,
	WIDOW2_BEAMER_2 = 196,
	WIDOW2_BEAMER_3 = 197,
	WIDOW2_BEAMER_4 = 198,
	WIDOW2_BEAMER_5 = 199,
	WIDOW2_BEAM_SWEEP_1 = 200,
	WIDOW2_BEAM_SWEEP_2 = 201,
	WIDOW2_BEAM_SWEEP_3 = 202,
	WIDOW2_BEAM_SWEEP_4 = 203,
	WIDOW2_BEAM_SWEEP_5 = 204,
	WIDOW2_BEAM_SWEEP_6 = 205,
	WIDOW2_BEAM_SWEEP_7 = 206,
	WIDOW2_BEAM_SWEEP_8 = 207,
	WIDOW2_BEAM_SWEEP_9 = 208,
	WIDOW2_BEAM_SWEEP_10 = 209,
	WIDOW2_BEAM_SWEEP_11 = 210,
	SOLDIER_RIPPER_1 = 211,
	SOLDIER_RIPPER_2 = 212,
	SOLDIER_RIPPER_3 = 213,
	SOLDIER_RIPPER_4 = 214,
	SOLDIER_RIPPER_5 = 215,
	SOLDIER_RIPPER_6 = 216,
	SOLDIER_RIPPER_7 = 217,
	SOLDIER_RIPPER_8 = 218,
	SOLDIER_HYPERGUN_1 = 219,
	SOLDIER_HYPERGUN_2 = 220,
	SOLDIER_HYPERGUN_3 = 221,
	SOLDIER_HYPERGUN_4 = 222,
	SOLDIER_HYPERGUN_5 = 223,
	SOLDIER_HYPERGUN_6 = 224,
	SOLDIER_HYPERGUN_7 = 225,
	SOLDIER_HYPERGUN_8 = 226,
	GUARDIAN_BLASTER = 227,
	ARACHNID_RAIL1 = 228,
	ARACHNID_RAIL2 = 229,
	ARACHNID_RAIL_UP1 = 230,
	ARACHNID_RAIL_UP2 = 231,
	INFANTRY_MACHINEGUN_14 = 232,
	INFANTRY_MACHINEGUN_15 = 233,
	INFANTRY_MACHINEGUN_16 = 234,
	INFANTRY_MACHINEGUN_17 = 235,
	INFANTRY_MACHINEGUN_18 = 236,
	INFANTRY_MACHINEGUN_19 = 237,
	INFANTRY_MACHINEGUN_20 = 238,
	INFANTRY_MACHINEGUN_21 = 239,
	GUNCMDR_CHAINGUN_1 = 240,
	GUNCMDR_CHAINGUN_2 = 241,
	GUNCMDR_GRENADE_MORTAR_1 = 242,
	GUNCMDR_GRENADE_MORTAR_2 = 243,
	GUNCMDR_GRENADE_MORTAR_3 = 244,
	GUNCMDR_GRENADE_FRONT_1 = 245,
	GUNCMDR_GRENADE_FRONT_2 = 246,
	GUNCMDR_GRENADE_FRONT_3 = 247,
	GUNCMDR_GRENADE_CROUCH_1 = 248,
	GUNCMDR_GRENADE_CROUCH_2 = 249,
	GUNCMDR_GRENADE_CROUCH_3 = 250,
	SOLDIER_BLASTER_9 = 251,
	SOLDIER_SHOTGUN_9 = 252,
	SOLDIER_MACHINEGUN_9 = 253,
	SOLDIER_RIPPER_9 = 254,
	SOLDIER_HYPERGUN_9 = 255,
	GUNNER_GRENADE2_1 = 256,
	GUNNER_GRENADE2_2 = 257,
	GUNNER_GRENADE2_3 = 258,
	GUNNER_GRENADE2_4 = 259,
	INFANTRY_MACHINEGUN_22 = 260,
	SUPERTANK_GRENADE_1 = 261,
	SUPERTANK_GRENADE_2 = 262,
	HOVER_BLASTER_2 = 263,
	DAEDALUS_BLASTER_2 = 264,
	MEDIC_HYPERBLASTER1_1 = 265,
	MEDIC_HYPERBLASTER1_2 = 266,
	MEDIC_HYPERBLASTER1_3 = 267,
	MEDIC_HYPERBLASTER1_4 = 268,
	MEDIC_HYPERBLASTER1_5 = 269,
	MEDIC_HYPERBLASTER1_6 = 270,
	MEDIC_HYPERBLASTER1_7 = 271,
	MEDIC_HYPERBLASTER1_8 = 272,
	MEDIC_HYPERBLASTER1_9 = 273,
	MEDIC_HYPERBLASTER1_10 = 274,
	MEDIC_HYPERBLASTER1_11 = 275,
	MEDIC_HYPERBLASTER1_12 = 276,
	MEDIC_HYPERBLASTER2_1 = 277,
	MEDIC_HYPERBLASTER2_2 = 278,
	MEDIC_HYPERBLASTER2_3 = 279,
	MEDIC_HYPERBLASTER2_4 = 280,
	MEDIC_HYPERBLASTER2_5 = 281,
	MEDIC_HYPERBLASTER2_6 = 282,
	MEDIC_HYPERBLASTER2_7 = 283,
	MEDIC_HYPERBLASTER2_8 = 284,
	MEDIC_HYPERBLASTER2_9 = 285,
	MEDIC_HYPERBLASTER2_10 = 286,
	MEDIC_HYPERBLASTER2_11 = 287,
	MEDIC_HYPERBLASTER2_12 = 288,
	LAST = 289
}
// funcdefs
funcdef trace_t pm_trace_f(const vec3_t &in, const vec3_t &in, const vec3_t &in, const vec3_t &in, edict_t @, contents_t);
funcdef trace_t pm_clip_f(const vec3_t &in, const vec3_t &in, const vec3_t &in, const vec3_t &in, contents_t);
funcdef contents_t pm_pointcontents_f(const vec3_t &in);
// objects
class string
{
	// funcdefs
	// properties
	// behaviors
	~string();
	string();
	string(const string&in);
	// factories
	// methods
	string &opAssign(const string &in);
	string &opAddAssign(const string &in);
	bool opEquals(const string &in) const;
	int32 opCmp(const string &in) const;
	string opAdd(const string &in) const;
	uint32 length() const;
	void resize(uint32);
	bool isEmpty() const;
	uint8 &opIndex(uint32);
	const uint8 &opIndex(uint32) const;
	string &opAssign(double);
	string &opAddAssign(double);
	string opAdd(double) const;
	string opAdd_r(double) const;
	string &opAssign(float);
	string &opAddAssign(float);
	string opAdd(float) const;
	string opAdd_r(float) const;
	string &opAssign(int64);
	string &opAddAssign(int64);
	string opAdd(int64) const;
	string opAdd_r(int64) const;
	string &opAssign(uint64);
	string &opAddAssign(uint64);
	string opAdd(uint64) const;
	string opAdd_r(uint64) const;
	string &opAssign(bool);
	string &opAddAssign(bool);
	string opAdd(bool) const;
	string opAdd_r(bool) const;
	string substr(uint32 start = 0, int32 count = -1) const;
	int32 findFirst(const string &in, uint32 start = 0) const;
	int32 findFirstOf(const string &in, uint32 start = 0) const;
	int32 findFirstNotOf(const string &in, uint32 start = 0) const;
	int32 findLast(const string &in, int32 start = -1) const;
	int32 findLastOf(const string &in, int32 start = -1) const;
	int32 findLastNotOf(const string &in, int32 start = -1) const;
	void insert(uint32 pos, const string &in other);
	void erase(uint32 pos, int32 count = -1);
	int32 regexFind(const string &in regex, uint32 start = 0, uint32 &out lengthOfMatch = void) const;
	uint32 size() const;
	bool empty() const;
	int32 find(const string &in, uint32 start = 0) const;
	int32 rfind(const string &in, int32 start = -1) const;
	array<string> @split(const string &in) const;
	string &appendChar(uint8);
	string aslower() const;
	string asupper() const;
}
class array<T>
{
	// funcdefs
	funcdef bool less(const T &in if_handle_then_const a, const T &in if_handle_then_const b);
	// properties
	// behaviors
    array();
	array(int&in type, int&in list) { repeat T };
	// factories
	array(int32 &in);
	array(int32 &in, uint32 length);
	array(int32 &in, uint32 length, const T &in value);
	// methods
	T &opIndex(uint32 index);
	const T &opIndex(uint32 index) const;
	uint32 opForBegin() const;
	bool opForEnd(uint32) const;
	uint32 opForNext(uint32) const;
	const T &opForValue0(uint32 index) const;
	uint32 opForValue1(uint32 index) const;
	array<T> &opAssign(const array<T> &in);
	void insertAt(uint32 index, const T &in value);
	void insertAt(uint32 index, const array<T> &arr);
	void insertLast(const T &in value);
	void removeAt(uint32 index);
	void removeLast();
	void removeRange(uint32 start, uint32 count);
	uint32 length() const;
	void reserve(uint32 length);
	void resize(uint32 length);
	void sortAsc();
	void sortAsc(uint32 startAt, uint32 count);
	void sortDesc();
	void sortDesc(uint32 startAt, uint32 count);
	void reverse();
	int32 find(const T &in if_handle_then_const value) const;
	int32 find(uint32 startAt, const T &in if_handle_then_const value) const;
	int32 findByRef(const T &in if_handle_then_const value) const;
	int32 findByRef(uint32 startAt, const T &in if_handle_then_const value) const;
	bool opEquals(const array<T> &in) const;
	bool isEmpty() const;
	void sort(less &in, uint32 startAt = 0, uint32 count = uint(-1));
	void shuffle(uint32 startAt = 0, uint32 count = uint(-1));
	uint32 size() const;
	bool empty() const;
	void push_back(const T &in);
	void pop_back();
	void insert(uint32 index, const T &in value);
	void insert(uint32 index, const array<T> &arr);
	void erase(uint32);
}
class any
{
	// funcdefs
	// properties
	// behaviors
	// factories
	any();
	any(? @&in);
	any(const int64 &in);
	any(const double &in);
	// methods
	any &opAssign(any &in);
	void store(? @&in);
	void store(const int64 &in);
	void store(const double &in);
	bool retrieve(? @&out) const;
	bool retrieve(int64 &out) const;
	bool retrieve(double &out) const;
}
class dictionaryValue
{
	// funcdefs
	// properties
	// behaviors
	~dictionaryValue();
	dictionaryValue();
	// factories
	// methods
	dictionaryValue &opAssign(const dictionaryValue &in);
	dictionaryValue &opHndlAssign(const ? @&in);
	dictionaryValue &opHndlAssign(const dictionaryValue &in);
	dictionaryValue &opAssign(const ? @&in);
	dictionaryValue &opAssign(double);
	dictionaryValue &opAssign(int64);
	void opCast(? @&out);
	void opConv(? @&out);
	int64 opConv();
	double opConv();
}
class dictionary
{
	// funcdefs
	// properties
	// behaviors
	dictionary(int&in) { repeat { string, ? } };
	// factories
	dictionary();
	// methods
	dictionary &opAssign(const dictionary &in);
	void set(const string &in, const ? @&in);
	bool get(const string &in, ? @&out) const;
	void set(const string &in, const int64 &in);
	bool get(const string &in, int64 &out) const;
	void set(const string &in, const double &in);
	bool get(const string &in, double &out) const;
	bool exists(const string &in) const;
	bool isEmpty() const;
	uint32 getSize() const;
	bool delete(const string &in);
	void deleteAll();
	array<string> @getKeys() const;
	dictionaryValue &opIndex(const string &in);
	const dictionaryValue &opIndex(const string &in) const;
	dictionaryIter @opForBegin() const;
	bool opForEnd(dictionaryIter @) const;
	dictionaryIter @opForNext(dictionaryIter @) const;
	const dictionaryValue &opForValue0(dictionaryIter @) const;
	const string &opForValue1(dictionaryIter @) const;
	bool empty() const;
	uint32 size() const;
	void erase(const string &in);
	void clear();
}
class dictionaryIter
{
	// funcdefs
	// properties
	// behaviors
	// factories
	// methods
}
class datetime
{
	// funcdefs
	// properties
	// behaviors
	datetime();
	datetime(const datetime&in);
	datetime(uint, uint, uint, uint = 0, uint = 0, uint = 0);
	// factories
	// methods
	datetime &opAssign(const datetime &in);
	uint32 get_year() const property;
	uint32 get_month() const property;
	uint32 get_day() const property;
	uint32 get_hour() const property;
	uint32 get_minute() const property;
	uint32 get_second() const property;
	uint32 get_weekDay() const property;
	bool setDate(uint32 year, uint32 month, uint32 day);
	bool setTime(uint32 hour, uint32 minute, uint32 second);
	int64 opSub(const datetime &in) const;
	datetime opAdd(int64 seconds) const;
	datetime opAdd_r(int64 seconds) const;
	datetime &opAddAssign(int64 seconds);
	datetime opSub(int64 seconds) const;
	datetime opSub_r(int64 seconds) const;
	datetime &opSubAssign(int64 seconds);
	bool opEquals(const datetime &in) const;
	int32 opCmp(const datetime &in) const;
}
class weakref<T>
{
	// funcdefs
	// properties
	// behaviors
	~weakref();
	weakref(int&in);
	weakref(int&in, T@);
	// factories
	// methods
	T @opImplCast();
	T @get() const;
	weakref<T> &opHndlAssign(const weakref<T> &in);
	weakref<T> &opAssign(const weakref<T> &in);
	bool opEquals(const weakref<T> &in) const;
	weakref<T> &opHndlAssign(T @);
	bool opEquals(T @) const;
}
class const_weakref<T>
{
	// funcdefs
	// properties
	// behaviors
	~const_weakref();
	const_weakref(int&in);
	const_weakref(int&in, const T@);
	// factories
	// methods
	T @opImplCast() const;
	T @get() const;
	const_weakref<T> &opHndlAssign(const const_weakref<T> &in);
	const_weakref<T> &opAssign(const const_weakref<T> &in);
	bool opEquals(const const_weakref<T> &in) const;
	const_weakref<T> &opHndlAssign(T @);
	bool opEquals(T @) const;
	const_weakref<T> &opHndlAssign(const weakref<T> &in);
	bool opEquals(const weakref<T> &in) const;
}
class vec3_t
{
	// funcdefs
	// properties
	float x;
	float y;
	float z;
	float pitch;
	float yaw;
	float roll;
	// behaviors
	vec3_t(int&in) { float, float, float };
	vec3_t(float, float, float);
	vec3_t(const vec3_t&in);
	// factories
	// methods
	float &opIndex(uint32);
	const float &opIndex(uint32) const;
	bool opEquals(const vec3_t &in) const;
	bool equals(const vec3_t &in, const float &in) const;
	bool opImplConv() const;
	float dot(const vec3_t &in) const;
	vec3_t scaled(const vec3_t &in) const;
	vec3_t &scale(const vec3_t &in);
	vec3_t opSub(const vec3_t &in) const;
	vec3_t opAdd(const vec3_t &in) const;
	vec3_t opDiv(const vec3_t &in) const;
	vec3_t opDiv(const float &in) const;
	vec3_t opDiv(const int32 &in) const;
	vec3_t opMul(const float &in) const;
	vec3_t opMul(const int32 &in) const;
	vec3_t opNeg() const;
	vec3_t &opSubAssign(const vec3_t &in);
	vec3_t &opAddAssign(const vec3_t &in);
	vec3_t &opDivAssign(const vec3_t &in);
	vec3_t &opDivAssign(const float &in);
	vec3_t &opDivAssign(const int32 &in);
	vec3_t &opMulAssign(const float &in);
	vec3_t &opMulAssign(const int32 &in);
	float lengthSquared() const;
	float length() const;
	vec3_t normalized() const;
	vec3_t normalized(float &out) const;
	float normalize();
	vec3_t cross(const vec3_t &in) const;
}
class rgba_t
{
	// funcdefs
	// properties
	uint8 r;
	uint8 g;
	uint8 b;
	uint8 a;
	// behaviors
	rgba_t(int&in) { repeat uint8 };
	rgba_t(uint8, uint8, uint8, uint8);
	// factories
	// methods
	uint8 &opIndex(uint32);
	const uint8 &opIndex(uint32) const;
	uint32 size() const;
}
class vec2_t
{
	// funcdefs
	// properties
	float x;
	float y;
	// behaviors
	vec2_t(int&in) { repeat float };
	vec2_t(float, float);
	// factories
	// methods
	float &opIndex(uint32);
	const float &opIndex(uint32) const;
	uint32 size() const;
}
class vec4_t
{
	// funcdefs
	// properties
	float x;
	float y;
	float z;
	float w;
	// behaviors
	vec4_t(int&in) { repeat float };
	vec4_t(float, float, float, float);
	// factories
	// methods
	float &opIndex(uint32);
	const float &opIndex(uint32) const;
	uint32 size() const;
	bool opEquals(const vec4_t &in) const;
}
class mat3_t
{
	// funcdefs
	// properties
	// behaviors
	mat3_t(int&in) { repeat vec3_t };
	// factories
	// methods
	vec3_t &opIndex(uint32);
	const vec3_t &opIndex(uint32) const;
	uint32 size() const;
}
class gtime_t
{
	// funcdefs
	// properties
	int64 milliseconds;
	// behaviors
	gtime_t(int64, timeunit_t);
	gtime_t(float, timeunit_t);
	gtime_t(const gtime_t&in);
	// factories
	// methods
	int64 secondsi() const;
	float secondsf() const;
	int64 minutesi() const;
	float minutesf() const;
	int64 frames() const;
	bool opEquals(const gtime_t &in) const;
	int32 opCmp(const gtime_t &in) const;
	gtime_t &opAssign(const gtime_t &in);
	gtime_t opSub(const gtime_t &in) const;
	gtime_t opAdd(const gtime_t &in) const;
	gtime_t opDiv(const int32 &in) const;
	gtime_t opMul(const int32 &in) const;
	gtime_t opDiv(const float &in) const;
	gtime_t opMul(const float &in) const;
	gtime_t opNeg() const;
	gtime_t &opSubAssign(const gtime_t &in);
	gtime_t &opAddAssign(const gtime_t &in);
	gtime_t &opDivAssign(const int32 &in);
	gtime_t &opMulAssign(const int32 &in);
	gtime_t &opDivAssign(const float &in);
	gtime_t &opMulAssign(const float &in);
	bool opImplConv() const;
}
class cvar_t
{
	// funcdefs
	// properties
	const cvar_flags_t flags;
	const int32 modified_count;
	const float value;
	const int32 integer;
	// behaviors
	// factories
	// methods
	string get_name() const property;
	string get_stringval() const property;
	string get_latched_stringval() const property;
	bool get_boolean() const property;
}
class string_hashset
{
	// funcdefs
	// properties
	// behaviors
	~string_hashset();
	string_hashset();
	// factories
	// methods
	bool empty() const;
	void clear();
	bool contains(const string &in) const;
	void add(const string &in);
	void remove(const string &in);
}
class cplane_t
{
	// funcdefs
	// properties
	vec3_t normal;
	float dist;
	uint8 type;
	uint8 signbits;
	// behaviors
	// factories
	// methods
}
class csurface_t
{
	// funcdefs
	// properties
	const surfflags_t flags;
	const int32 value;
	const uint32 id;
	// behaviors
	// factories
	// methods
	string get_name() const property;
	string get_material() const property;
}
class stat_array_t
{
	// funcdefs
	// properties
	// behaviors
	stat_array_t(int&in) { repeat int16 };
	// factories
	// methods
	int16 &opIndex(uint32);
	const int16 &opIndex(uint32) const;
	uint32 size() const;
	uint8 get_stat_uint8(uint32 byte_offset) const;
	void set_stat_uint8(uint32 byte_offset, uint8 value);
	uint16 get_stat_uint16(uint32 byte_offset) const;
	void set_stat_uint16(uint32 byte_offset, uint16 value);
	uint32 get_stat_uint32(uint32 byte_offset) const;
	void set_stat_uint32(uint32 byte_offset, uint32 value);
	uint64 get_stat_uint64(uint32 byte_offset) const;
	void set_stat_uint64(uint32 byte_offset, uint64 value);
	int8 get_stat_int8(uint32 byte_offset) const;
	void set_stat_int8(uint32 byte_offset, int8 value);
	int16 get_stat_int16(uint32 byte_offset) const;
	void set_stat_int16(uint32 byte_offset, int16 value);
	int32 get_stat_int32(uint32 byte_offset) const;
	void set_stat_int32(uint32 byte_offset, int32 value);
	int64 get_stat_int64(uint32 byte_offset) const;
	void set_stat_int64(uint32 byte_offset, int64 value);
	void fill(uint32 byte_offset, uint8 value, uint32 count);
}
class pmove_state_t
{
	// funcdefs
	// properties
	pmtype_t pm_type;
	vec3_t origin;
	vec3_t velocity;
	uint16 pm_time;
	pmflags_t pm_flags;
	int16 gravity;
	vec3_t delta_angles;
	int8 viewheight;
	// behaviors
	// factories
	// methods
	bool opEquals(const pmove_state_t &in) const;
}
class player_state_t
{
	// funcdefs
	// properties
	pmove_state_t pmove;
	vec3_t viewangles;
	vec3_t viewoffset;
	vec3_t kick_angles;
	vec3_t gunangles;
	vec3_t gunoffset;
	int32 gunindex;
	int32 gunskin;
	int32 gunframe;
	int32 gunrate;
	vec4_t screen_blend;
	vec4_t damage_blend;
	float fov;
	refdef_flags_t rdflags;
	stat_array_t stats;
	uint8 team_id;
	// behaviors
	player_state_t();
	// factories
	// methods
}
class trace_t
{
	// funcdefs
	// properties
	bool allsolid;
	bool startsolid;
	float fraction;
	vec3_t endpos;
	cplane_t plane;
	csurface_t @surface;
	contents_t contents;
	edict_t @ent;
	cplane_t plane2;
	csurface_t @surface2;
	// behaviors
	trace_t(const trace_t&in);
	// factories
	// methods
	trace_t &opAssign(const trace_t &in);
}
class usercmd_t
{
	// funcdefs
	// properties
	uint8 msec;
	button_t buttons;
	vec3_t angles;
	float forwardmove;
	float sidemove;
	uint32 server_frame;
	// behaviors
	// factories
	// methods
}
class pmove_t
{
	// funcdefs
	// properties
	pmove_state_t s;
	usercmd_t cmd;
	bool snapinitial;
	vec3_t viewangles;
	vec3_t mins;
	vec3_t maxs;
	edict_t @groundentity;
	cplane_t groundplane;
	contents_t watertype;
	water_level_t waterlevel;
	edict_t @player;
	pm_trace_f @trace;
	pm_clip_f @clip;
	pm_pointcontents_f @pointcontents;
	vec3_t viewoffset;
	vec4_t screen_blend;
	refdef_flags_t rdflags;
	bool jump_sound;
	bool step_clip;
	float impact_delta;
	// behaviors
	// factories
	pmove_t();
	// methods
	uint32 touch_length() const;
	void touch_push_back(trace_t &in);
	const trace_t &touch_get(uint32 i) const;
	void touch_clear();
}
class tokenizer_t
{
	// funcdefs
	// properties
	// behaviors
	// factories
	tokenizer_t();
	tokenizer_t(const string &in);
	tokenizer_t(configstring_id_t id);
	// methods
	string get_separators() const property;
	void set_separators(const string &in) property;
	bool get_has_next() const property;
	bool get_has_token() const property;
	bool token_equals(const string &in) const;
	bool token_iequals(const string &in) const;
	bool token_equalsn(const string &in, uint32) const;
	bool token_iequalsn(const string &in, uint32) const;
	bool next();
	uint32 token_length() const;
	uint8 token_char(uint32) const;
	uint8 as_uint8() const;
	uint16 as_uint16() const;
	uint32 as_uint32() const;
	uint64 as_uint64() const;
	int8 as_int8() const;
	int16 as_int16() const;
	int32 as_int32() const;
	int64 as_int64() const;
	float as_float() const;
	double as_double() const;
	string as_string() const;
	bool skip_tokens(int32);
	void push_state();
	void pop_state();
	void reset();
    // cgame only
	string as_localized(int32);
}
// properties
const float PIf;
const double PI;
const float RAD2DEGf;
const float DEG2RADf;
const double RAD2DEG;
const double DEG2RAD;
const vec3_t vec3_origin;
const uint32 MAX_SPLIT_PLAYERS;
// functions
uint32 scan(const string &in str, ? &out ...);
string formatInt(int64 val, const string &in options = "", uint32 width = 0);
string formatUInt(uint64 val, const string &in options = "", uint32 width = 0);
string formatFloat(double val, const string &in options = "", uint32 width = 0, uint32 precision = 0);
int64 parseInt(const string &in, uint32 base = 10, uint32 &out byteCount = 0);
uint64 parseUInt(const string &in, uint32 base = 10, uint32 &out byteCount = 0);
double parseFloat(const string &in, uint32 &out byteCount = 0);
string join(const array<string> &in, const string &in);
void throw(const string &in);
string getExceptionInfo();
void div(int32, int32, int32 &out quot = void, int32 &out rem = void);
void div(int64, int64, int64 &out quot = void, int64 &out rem = void);
int32 abs(int32);
int64 abs(int64);
float abs(float);
double abs(double);
float fmod(float, float);
double fmod(double, double);
float remainder(float, float);
double remainder(double, double);
float remquo(float, float, int32 &out);
double remquo(double, double, int32 &out);
float fma(float, float, float);
double fma(double, double, double);
float max(float, float);
double max(double, double);
int8 max(int8, int8);
uint8 max(uint8, uint8);
int16 max(int16, int16);
uint16 max(uint16, uint16);
int32 max(int32, int32);
uint32 max(uint32, uint32);
int64 max(int64, int64);
uint64 max(uint64, uint64);
float min(float, float);
double min(double, double);
int8 min(int8, int8);
uint8 min(uint8, uint8);
int16 min(int16, int16);
uint16 min(uint16, uint16);
int32 min(int32, int32);
uint32 min(uint32, uint32);
int64 min(int64, int64);
uint64 min(uint64, uint64);
float exp(float);
double exp(double);
double exp(int8);
double exp(uint8);
double exp(int16);
double exp(uint16);
double exp(int32);
double exp(uint32);
double exp(int64);
double exp(uint64);
float exp2(float);
double exp2(double);
double exp2(int8);
double exp2(uint8);
double exp2(int16);
double exp2(uint16);
double exp2(int32);
double exp2(uint32);
double exp2(int64);
double exp2(uint64);
float expm1(float);
double expm1(double);
double expm1(int8);
double expm1(uint8);
double expm1(int16);
double expm1(uint16);
double expm1(int32);
double expm1(uint32);
double expm1(int64);
double expm1(uint64);
float log(float);
double log(double);
double log(int8);
double log(uint8);
double log(int16);
double log(uint16);
double log(int32);
double log(uint32);
double log(int64);
double log(uint64);
float log10(float);
double log10(double);
double log10(int8);
double log10(uint8);
double log10(int16);
double log10(uint16);
double log10(int32);
double log10(uint32);
double log10(int64);
double log10(uint64);
float log2(float);
double log2(double);
double log2(int8);
double log2(uint8);
double log2(int16);
double log2(uint16);
double log2(int32);
double log2(uint32);
double log2(int64);
double log2(uint64);
float log1p(float);
double log1p(double);
double log1p(int8);
double log1p(uint8);
double log1p(int16);
double log1p(uint16);
double log1p(int32);
double log1p(uint32);
double log1p(int64);
double log1p(uint64);
float pow(float, float);
double pow(double, double);
double pow(int8, int8);
double pow(uint8, uint8);
double pow(int16, int16);
double pow(uint16, uint16);
double pow(int32, int32);
double pow(uint32, uint32);
double pow(int64, int64);
double pow(uint64, uint64);
float sqrt(float);
double sqrt(double);
float cbrt(float);
double cbrt(double);
float hypot(float, float);
double hypot(double, double);
float sin(float);
double sin(double);
float cos(float);
double cos(double);
float tan(float);
double tan(double);
float asin(float);
double asin(double);
float acos(float);
double acos(double);
float atan(float);
double atan(double);
float atan2(float, float);
double atan2(double, double);
float sinh(float);
double sinh(double);
float cosh(float);
double cosh(double);
float tanh(float);
double tanh(double);
float asinh(float);
double asinh(double);
float acosh(float);
double acosh(double);
float atanh(float);
double atanh(double);
float erf(float);
double erf(double);
float erfc(float);
double erfc(double);
float tgamma(float);
double tgamma(double);
float lgamma(float);
double lgamma(double);
float ceil(float);
double ceil(double);
float floor(float);
double floor(double);
float trunc(float);
double trunc(double);
float round(float);
double round(double);
float nearbyint(float);
double nearbyint(double);
float rint(float);
double rint(double);
float frexp(float, int32 &out);
double frexp(double, int32 &out);
float ldexp(float, int32);
double ldexp(double, int32);
float modf(float, float &out);
double modf(double, double &out);
float scalbn(float, int32);
double scalbn(double, int32);
int32 ilogb(float);
int32 ilogb(double);
float logb(float);
double logb(double);
float nextafter(float, float);
double nextafter(double, double);
float nexttoward(float, double);
double nexttoward(double, double);
float copysign(float, float);
double copysign(double, double);
bool isinf(float);
bool isinf(double);
bool isfinite(float);
bool isfinite(double);
bool isnan(float);
bool isnan(double);
bool isnormal(float);
bool isnormal(double);
bool signbit(float);
bool signbit(double);
bool signbit(int8);
bool signbit(uint8);
bool signbit(int16);
bool signbit(uint16);
bool signbit(int32);
bool signbit(uint32);
bool signbit(int64);
bool signbit(uint64);
float clamp(float, float, float);
double clamp(double, double, double);
int8 clamp(int8, int8, int8);
uint8 clamp(uint8, uint8, uint8);
int16 clamp(int16, int16, int16);
uint16 clamp(uint16, uint16, uint16);
int32 clamp(int32, int32, int32);
uint32 clamp(uint32, uint32, uint32);
int64 clamp(int64, int64, int64);
uint64 clamp(uint64, uint64, uint64);
float lerp(float, float, float);
float LerpAngle(float, float, float);
float anglemod(float);
void AngleVectors(const vec3_t &in, vec3_t &out forward = void, vec3_t &out right = void, vec3_t &out up = void);
vec3_t ProjectPointOnPlane(const vec3_t &in, const vec3_t &in) nodiscard;
vec3_t PerpendicularVector(const vec3_t &in) nodiscard;
vec3_t RotatePointAroundVector(const vec3_t &in, const vec3_t &in, float) nodiscard;
bool boxes_intersect(const vec3_t &in, const vec3_t &in, const vec3_t &in, const vec3_t &in) nodiscard;
float distance_between_boxes(const vec3_t &in, const vec3_t &in, const vec3_t &in, const vec3_t &in) nodiscard;
vec3_t closest_point_to_box(const vec3_t &in, const vec3_t &in, const vec3_t &in) nodiscard;
vec3_t ClipVelocity(const vec3_t &in, const vec3_t &in, float) nodiscard;
vec3_t SlideClipVelocity(const vec3_t &in, const vec3_t &in, float) nodiscard;
float vectoyaw(const vec3_t &in) nodiscard;
vec3_t vectoangles(const vec3_t &in) nodiscard;
vec3_t G_ProjectSource(const vec3_t &in, const vec3_t &in, const vec3_t &in, const vec3_t &in) nodiscard;
vec3_t G_ProjectSource2(const vec3_t &in, const vec3_t &in, const vec3_t &in, const vec3_t &in, const vec3_t &in) nodiscard;
vec3_t slerp(const vec3_t &in, const vec3_t &in, float) nodiscard;
vec3_t lerp(vec3_t, vec3_t, float) nodiscard;
void G_AddBlend(float r, float g, float b, float a, const vec4_t &in, vec4_t &out);
gtime_t time_ms(int64);
gtime_t time_sec(int64);
gtime_t time_sec(float);
gtime_t time_min(int64);
gtime_t time_min(float);
gtime_t time_hz(uint64);
gtime_t clamp(const gtime_t &in, const gtime_t &in, const gtime_t &in);
gtime_t min(const gtime_t &in, const gtime_t &in);
gtime_t max(const gtime_t &in, const gtime_t &in);
float frandom();
float frandom(float, float);
float frandom(float);
gtime_t random_time(const gtime_t &in, const gtime_t &in);
gtime_t random_time(const gtime_t &in);
float crandom();
float crandom_open();
uint32 irandom();
int32 irandom(int32, int32);
int32 irandom(int32);
bool brandom();
int32 Q_strcasecmp(const string &in, const string &in);
int32 Q_strncasecmp(const string &in, const string &in, uint32 n);
string format(const string &in fmt, const ? &in ...);
void profile_start(const string &in);
void profile_end();
string backtrace();
void debugbreak();
void sleep(int32);
void print(const string &in s);
string typeof(const ? @&in);
string reflect_name_of_global<T>(T @);
bool reflect_global_from_name<T>(const string &in, T @&out, bool = false);

// game

enum gesture_type_t : int32
{
	NONE = -1,
	FLIP_OFF = 0,
	SALUTE = 1,
	TAUNT = 2,
	WAVE = 3,
	POINT = 4,
	POINT_NO_PING = 5,
	MAX = 6
}
enum print_type_t : int32
{
	LOW = 0,
	MEDIUM = 1,
	HIGH = 2,
	CHAT = 3,
	TYPEWRITER = 4,
	CENTER = 5,
	TTS = 6,
	BROADCAST = 8,
	NO_NOTIFY = 16
}
enum BoxEdictsResult_t : int32
{
	Keep = 0,
	Skip = 1,
	End = 64,
	Flags = 64
}
enum multicast_t : int32
{
	ALL = 0,
	PHS = 1,
	PVS = 2
}
enum solidity_area_t : int32
{
	SOLID = 1,
	TRIGGERS = 2
}
enum soundchan_t : uint8
{
	AUTO = 0,
	WEAPON = 1,
	VOICE = 2,
	ITEM = 3,
	BODY = 4,
	AUX = 5,
	FOOTSTEP = 6,
	AUX3 = 7,
	NO_PHS_ADD = 8,
	RELIABLE = 16,
	FORCE_POS = 32
}
enum svc_t : int32
{
	bad = 0,
	muzzleflash = 1,
	muzzleflash2 = 2,
	temp_entity = 3,
	layout = 4,
	inventory = 5,
	nop = 6,
	disconnect = 7,
	reconnect = 8,
	sound = 9,
	print = 10,
	stufftext = 11,
	serverdata = 12,
	configstring = 13,
	spawnbaseline = 14,
	centerprint = 15,
	download = 16,
	playerinfo = 17,
	packetentities = 18,
	deltapacketentities = 19,
	frame = 20,
	configblast = 22,
	spawnbaselineblast = 23,
	level_restart = 24,
	damage = 25,
	locprint = 26,
	fog = 27,
	waitingforplayers = 28,
	bot_chat = 29,
	poi = 30,
	help_path = 31,
	muzzleflash3 = 32,
	achievement = 33,
	last = 34
}
enum player_muzzle_t : int32
{
	BLASTER = 0,
	MACHINEGUN = 1,
	SHOTGUN = 2,
	CHAINGUN1 = 3,
	CHAINGUN2 = 4,
	CHAINGUN3 = 5,
	RAILGUN = 6,
	ROCKET = 7,
	GRENADE = 8,
	LOGIN = 9,
	LOGOUT = 10,
	RESPAWN = 11,
	BFG = 12,
	SSHOTGUN = 13,
	HYPERBLASTER = 14,
	ITEMRESPAWN = 15,
	IONRIPPER = 16,
	BLUEHYPERBLASTER = 17,
	PHALANX = 18,
	BFG2 = 19,
	PHALANX2 = 20,
	ETF_RIFLE = 30,
	PROX = 31,
	ETF_RIFLE_2 = 32,
	HEATBEAM = 33,
	BLASTER2 = 34,
	TRACKER = 35,
	NUKE1 = 36,
	NUKE2 = 37,
	NUKE4 = 38,
	NUKE8 = 39,
	SILENCED = 128,
	NONE = 0
}
enum temp_event_t : int32
{
	GUNSHOT = 0,
	BLOOD = 1,
	BLASTER = 2,
	RAILTRAIL = 3,
	SHOTGUN = 4,
	EXPLOSION1 = 5,
	EXPLOSION2 = 6,
	ROCKET_EXPLOSION = 7,
	GRENADE_EXPLOSION = 8,
	SPARKS = 9,
	SPLASH = 10,
	BUBBLETRAIL = 11,
	SCREEN_SPARKS = 12,
	SHIELD_SPARKS = 13,
	BULLET_SPARKS = 14,
	LASER_SPARKS = 15,
	PARASITE_ATTACK = 16,
	ROCKET_EXPLOSION_WATER = 17,
	GRENADE_EXPLOSION_WATER = 18,
	MEDIC_CABLE_ATTACK = 19,
	BFG_EXPLOSION = 20,
	BFG_BIGEXPLOSION = 21,
	BOSSTPORT = 22,
	BFG_LASER = 23,
	GRAPPLE_CABLE = 24,
	WELDING_SPARKS = 25,
	GREENBLOOD = 26,
	BLUEHYPERBLASTER_DUMMY = 27,
	PLASMA_EXPLOSION = 28,
	TUNNEL_SPARKS = 29,
	BLASTER2 = 30,
	RAILTRAIL2 = 31,
	FLAME = 32,
	LIGHTNING = 33,
	DEBUGTRAIL = 34,
	PLAIN_EXPLOSION = 35,
	FLASHLIGHT = 36,
	FORCEWALL = 37,
	HEATBEAM = 38,
	MONSTER_HEATBEAM = 39,
	STEAM = 40,
	BUBBLETRAIL2 = 41,
	MOREBLOOD = 42,
	HEATBEAM_SPARKS = 43,
	HEATBEAM_STEAM = 44,
	CHAINFIST_SMOKE = 45,
	ELECTRIC_SPARKS = 46,
	TRACKER_EXPLOSION = 47,
	TELEPORT_EFFECT = 48,
	DBALL_GOAL = 49,
	WIDOWBEAMOUT = 50,
	NUKEBLAST = 51,
	WIDOWSPLASH = 52,
	EXPLOSION1_BIG = 53,
	EXPLOSION1_NP = 54,
	FLECHETTE = 55,
	BLUEHYPERBLASTER = 56,
	BFG_ZAP = 57,
	BERSERK_SLAM = 58,
	GRAPPLE_CABLE_2 = 59,
	POWER_SPLASH = 60,
	LIGHTNING_BEAM = 61,
	EXPLOSION1_NL = 62,
	EXPLOSION2_NL = 63
}
enum splash_color_t : int32
{
	UNKNOWN = 0,
	SPARKS = 1,
	BLUE_WATER = 2,
	BROWN_WATER = 3,
	SLIME = 4,
	LAVA = 5,
	BLOOD = 6,
	ELECTRIC = 7
}
enum server_flags_t : int32
{
	NONE = 0,
	SLOW_TIME = 1,
	INTERMISSION = 2,
	LOADING = 4
}
enum renderfx_t : int32
{
	NONE = 0,
	MINLIGHT = 1,
	VIEWERMODEL = 2,
	WEAPONMODEL = 4,
	FULLBRIGHT = 8,
	DEPTHHACK = 16,
	TRANSLUCENT = 32,
	NO_ORIGIN_LERP = 64,
	BEAM = 128,
	CUSTOMSKIN = 256,
	GLOW = 512,
	SHELL_RED = 1024,
	SHELL_GREEN = 2048,
	SHELL_BLUE = 4096,
	NOSHADOW = 8192,
	CASTSHADOW = 16384,
	IR_VISIBLE = 32768,
	SHELL_DOUBLE = 65536,
	SHELL_HALF_DAM = 131072,
	USE_DISGUISE = 262144,
	SHELL_LITE_GREEN = 524288,
	CUSTOM_LIGHT = 1048576,
	FLARE = 2097152,
	OLD_FRAME_LERP = 4194304,
	DOT_SHADOW = 8388608,
	LOW_PRIORITY = 16777216,
	NO_LOD = 33554432,
	NO_STEREO = 4,
	STAIR_STEP = 67108864,
	FLARE_LOCK_ANGLE = 1,
	BEAM_LIGHTNING = 640
}
enum effects_t : uint64
{
	NONE = 0,
	ROTATE = 1,
	GIB = 2,
	BOB = 4,
	BLASTER = 8,
	ROCKET = 16,
	GRENADE = 32,
	HYPERBLASTER = 64,
	BFG = 128,
	COLOR_SHELL = 256,
	POWERSCREEN = 512,
	ANIM01 = 1024,
	ANIM23 = 2048,
	ANIM_ALL = 4096,
	ANIM_ALLFAST = 8192,
	FLIES = 16384,
	QUAD = 32768,
	PENT = 65536,
	TELEPORTER = 131072,
	FLAG1 = 262144,
	FLAG2 = 524288,
	IONRIPPER = 1048576,
	GREENGIB = 2097152,
	BLUEHYPERBLASTER = 4194304,
	SPINNINGLIGHTS = 8388608,
	PLASMA = 16777216,
	TRAP = 33554432,
	TRACKER = 67108864,
	DOUBLE = 134217728,
	SPHERETRANS = 268435456,
	TAGTRAIL = 536870912,
	HALF_DAMAGE = 1073741824,
	TRACKERTRAIL = 2147483648,
	DUALFIRE = 4294967296,
	HOLOGRAM = 8589934592,
	FLASHLIGHT = 17179869184,
	BARREL_EXPLODING = 34359738368,
	TELEPORTER2 = 68719476736,
	GRENADE_LIGHT = 137438953472,
	FIREBALL = 18
}
enum entity_event_t : uint8
{
	NONE = 0,
	ITEM_RESPAWN = 1,
	FOOTSTEP = 2,
	FALLSHORT = 3,
	FALL = 4,
	FALLFAR = 5,
	PLAYER_TELEPORT = 6,
	OTHER_TELEPORT = 7,
	OTHER_FOOTSTEP = 8,
	LADDER_STEP = 9
}
enum svflags_t : int32
{
	NONE = 0,
	NOCLIENT = 1,
	DEADMONSTER = 2,
	MONSTER = 4,
	PLAYER = 8,
	BOT = 16,
	NOBOTS = 32,
	RESPAWNING = 64,
	PROJECTILE = 128,
	INSTANCED = 256,
	DOOR = 512,
	NOCULL = 1024,
	HULL = 2048
}
enum solid_t : uint8
{
	NOT = 0,
	TRIGGER = 1,
	BBOX = 2,
	BSP = 3
}

enum GoalReturnCode : int32
{
	Error = 0,
	Started = 1,
	InProgress = 2,
	Finished = 3
}
enum gesture_type : int32
{
	NONE = -1,
	FLIP_OFF = 0,
	SALUTE = 1,
	TAUNT = 2,
	WAVE = 3,
	POINT = 4,
	POINT_NO_PING = 5,
	MAX = 6
}
enum PathReturnCode : int32
{
	ReachedGoal = 0,
	ReachedPathEnd = 1,
	TraversalPending = 2,
	RawPathFound = 3,
	InProgress = 4,
	StartPathErrors = 5,
	InvalidStart = 6,
	InvalidGoal = 7,
	NoNavAvailable = 8,
	NoStartNode = 9,
	NoGoalNode = 10,
	NoPathFound = 11,
	MissingWalkOrSwimFlag = 12
}
enum PathLinkType : int32
{
	Walk = 0,
	WalkOffLedge = 1,
	LongJump = 2,
	BarrierJump = 3,
	Elevator = 4
}
enum PathFlags : int32
{
	All = 4294967295,
	Water = 1,
	Walk = 2,
	WalkOffLedge = 4,
	LongJump = 8,
	BarrierJump = 16,
	Elevator = 32
}
enum shadow_light_type_t : int32
{
	point = 0,
	cone = 1
}

funcdef BoxEdictsResult_t BoxEdictsFilter_t(edict_t @, const any @);

class entity_state_t
{
	// funcdefs
	// properties
	const uint32 number;
	vec3_t origin;
	vec3_t angles;
	vec3_t old_origin;
	int32 modelindex;
	int32 modelindex2;
	int32 modelindex3;
	int32 modelindex4;
	int32 frame;
	int32 skinnum;
	effects_t effects;
	renderfx_t renderfx;
	int32 sound;
	entity_event_t event;
	float alpha;
	float scale;
	float loop_volume;
	float loop_attenuation;
	int32 old_frame;
	const uint32 solid_bits;
	const int32 owner_id;
	const uint8 instance_bits;
	// behaviors
	// factories
	// methods
	entity_state_t &opAssign(const entity_state_t &in);
}
class gclient_t
{
	// funcdefs
	// properties
	player_state_t ps;
	pmove_state_t pmove;
	vec3_t viewangles;
	vec3_t viewoffset;
	vec3_t kick_angles;
	vec3_t gunangles;
	vec3_t gunoffset;
	int32 gunindex;
	int32 gunskin;
	int32 gunframe;
	int32 gunrate;
	vec4_t screen_blend;
	vec4_t damage_blend;
	float fov;
	refdef_flags_t rdflags;
	stat_array_t stats;
	uint8 team_id;
	const int32 ping;
	// behaviors
	// factories
	// methods
}
class armorInfo_t
{
	// funcdefs
	// properties
	int32 item_id;
	int32 max_count;
	// behaviors
	// factories
	// methods
}
class inventoryArray_t
{
	// funcdefs
	// properties
	// behaviors
	inventoryArray_t(int&in) { repeat int };
	// factories
	// methods
	int32 &opIndex(uint32);
	const int32 &opIndex(uint32) const;
	uint32 size() const;
}
class armorInfoArray_t
{
	// funcdefs
	// properties
	// behaviors
	armorInfoArray_t(int&in) { repeat armorInfo_t };
	// factories
	// methods
	armorInfo_t &opIndex(uint32);
	const armorInfo_t &opIndex(uint32) const;
	uint32 size() const;
}
class edict_t
{
	// funcdefs
	// properties
	entity_state_t s;
	const uint32 number;
	vec3_t origin;
	vec3_t angles;
	vec3_t old_origin;
	int32 modelindex;
	int32 modelindex2;
	int32 modelindex3;
	int32 modelindex4;
	int32 frame;
	int32 skinnum;
	effects_t effects;
	renderfx_t renderfx;
	int32 sound;
	entity_event_t event;
	float alpha;
	float scale;
	float loop_volume;
	float loop_attenuation;
	int32 old_frame;
	const uint8 instance_bits;
	player_state_t ps;
	gclient_t @client;
	bool inuse;
	const bool linked;
	const int32 linkcount;
	const int32 areanum;
	const int32 areanum2;
	svflags_t svflags;
	vec3_t mins;
	vec3_t maxs;
	vec3_t absmin;
	vec3_t absmax;
	vec3_t size;
	solid_t solid;
	contents_t clipmask;
	edict_t @owner;
	sv_entity_t sv;
	IASEntity @as_obj;
	// behaviors
	// factories
	// methods
	void reset();
}
class sv_entity_t
{
	// funcdefs
	// properties
	bool init;
	uint64 ent_flags;
	button_t buttons;
	uint32 spawnflags;
	int32 item_id;
	int32 armor_type;
	int32 armor_value;
	int32 health;
	int32 max_health;
	int32 starting_health;
	int32 weapon;
	int32 team;
	int32 lobby_usernum;
	int32 respawntime;
	int32 viewheight;
	int32 last_attackertime;
	water_level_t waterlevel;
	vec3_t viewangles;
	vec3_t viewforward;
	vec3_t velocity;
	vec3_t start_origin;
	vec3_t end_origin;
	edict_t @enemy;
	edict_t @ground_entity;
	inventoryArray_t inventory;
	armorInfoArray_t armor_info;
	// behaviors
	// factories
	// methods
	void set_classname(const string &in) property;
	void set_targetname(const string &in) property;
	void set_netname(const string &in) property;
}
class IASEntity
{
	// funcdefs
	// properties
	// behaviors
	// factories
	// methods
	edict_t @get_handle() const property;
}

class json_mutval
{
	// funcdefs
	// properties
	// behaviors
	~json_mutval();
	json_mutval();
	json_mutval(const json_mutval&in);
	// factories
	// methods
	json_mutval &opAssign(const json_mutval &in);
	bool get_valid() const property;
	string to_string() const;
	bool get_is_obj() const property;
	bool get_is_arr() const property;
	bool get_is_ctn() const property;
	bool get_is_true() const property;
	bool get_is_false() const property;
	bool get_is_bool() const property;
	bool get_is_str() const property;
	bool get_is_int() const property;
	bool get_is_uint() const property;
	bool get_is_sint() const property;
	bool get_is_real() const property;
	bool get_is_null() const property;
	bool get_is_num() const property;
	bool arr_insert(json_mutval v, uint64 index);
	bool arr_append(json_mutval v);
	bool arr_prepend(json_mutval v);
	json_mutval arr_replace(uint64 index, json_mutval v);
	json_mutval arr_remove_first();
	json_mutval arr_remove_last();
	bool arr_remove_range(uint64 index, uint64 len);
	bool arr_clear();
	uint64 get_arr_size() const property;
	bool obj_add(const string &in, json_mutval v);
	bool obj_put(const string &in, json_mutval v);
	bool obj_remove(const string &in);
	bool obj_rename_key(const string &in, const string &in);
	bool obj_clear();
	uint64 get_obj_size() const property;
}
class json_mutdoc
{
	// funcdefs
	// properties
	// behaviors
	// factories
	json_mutdoc();
	json_mutdoc(const json_doc &in);
	// methods
	json_mutval get_root() property;
	void set_root(const json_mutval &in val) property;
	void set_str_pool_size(uint64 len);
	void set_val_pool_size(uint64 len);
	json_mutval null_();
	json_mutval true_();
	json_mutval false_();
	json_mutval bool_(bool);
	json_mutval uint_(uint64);
	json_mutval sint(int64);
	json_mutval int_(int64);
	json_mutval real(double);
	json_mutval str(const string &in, uint32 len);
	json_mutval str(const string &in);
	json_mutval obj();
	json_mutval arr();
	string to_string() const;
}
class json_val
{
	// funcdefs
	// properties
	// behaviors
	~json_val();
	json_val();
	json_val(const json_val&in);
	// factories
	// methods
	json_val &opAssign(const json_val &in);
	bool get_valid() const property;
	string to_string() const;
	bool get_is_obj() const property;
	bool get_is_arr() const property;
	bool get_is_ctn() const property;
	bool get_is_true() const property;
	bool get_is_false() const property;
	bool get_is_bool() const property;
	bool get_is_str() const property;
	bool get_is_int() const property;
	bool get_is_uint() const property;
	bool get_is_sint() const property;
	bool get_is_real() const property;
	bool get_is_null() const property;
	bool get_is_num() const property;
	bool get_bool_() const property;
	uint64 get_uint_() const property;
	int64 get_sint() const property;
	int32 get_int_() const property;
	double get_real() const property;
	double get_num() const property;
	string get_str() const property;
	uint64 get_length() const property;
	json_val arr_get(uint64) const;
	json_val arr_get_first() const;
	json_val arr_get_last() const;
	json_val obj_get(const string &in) const;
}
class json_doc
{
	// funcdefs
	// properties
	// behaviors
	// factories
	json_doc();
	json_doc(const string &in);
	json_doc(const json_mutdoc &in);
	// methods
	json_val get_root() property;
	uint64 get_read_size() const property;
	uint64 get_val_count() const property;
	string to_string() const;
}
class json_arr_iter
{
	// funcdefs
	// properties
	// behaviors
	~json_arr_iter();
	json_arr_iter();
	json_arr_iter(const json_arr_iter&in);
	json_arr_iter(json_val);
	// factories
	// methods
	json_arr_iter &opAssign(const json_arr_iter &in);
	json_val get_next() const property;
	bool get_has_next() const property;
}
class json_obj_iter
{
	// funcdefs
	// properties
	// behaviors
	~json_obj_iter();
	json_obj_iter();
	json_obj_iter(const json_obj_iter&in);
	json_obj_iter(json_val);
	// factories
	// methods
	json_obj_iter &opAssign(const json_obj_iter &in);
	json_val get_next() const property;
	json_val get_val(const json_val &in key) const;
	bool get_has_next() const property;
}
class PathDebugSettings
{
	// funcdefs
	// properties
	float drawTime;
	// behaviors
	PathDebugSettings();
	PathDebugSettings(const PathDebugSettings&in);
	// factories
	// methods
	PathDebugSettings &opAssign(const PathDebugSettings &in);
}
class PathNodeSettings
{
	// funcdefs
	// properties
	bool ignoreNodeFlags;
	float minHeight;
	float maxHeight;
	float radius;
	// behaviors
	PathNodeSettings();
	PathNodeSettings(const PathNodeSettings&in);
	// factories
	// methods
	PathNodeSettings &opAssign(const PathNodeSettings &in);
}
class PathTraversalSettings
{
	// funcdefs
	// properties
	float dropHeight;
	float jumpHeight;
	// behaviors
	PathTraversalSettings();
	PathTraversalSettings(const PathTraversalSettings&in);
	// factories
	// methods
	PathTraversalSettings &opAssign(const PathTraversalSettings &in);
}
class PathRequest
{
	// funcdefs
	// properties
	vec3_t start;
	vec3_t goal;
	PathFlags pathFlags;
	float moveDist;
	PathDebugSettings debugging;
	PathNodeSettings nodeSearch;
	PathTraversalSettings traversals;
	int64 maxPathPoints;
	// behaviors
	PathRequest();
	PathRequest(const PathRequest&in);
	// factories
	// methods
	PathRequest &opAssign(const PathRequest &in);
}
class PathInfo
{
	// funcdefs
	// properties
	uint32 numPathPoints;
	float pathDistSqr;
	vec3_t firstMovePoint;
	vec3_t secondMovePoint;
	PathLinkType pathLinkType;
	PathReturnCode returnCode;
	// behaviors
	// factories
	PathInfo();
	// methods
	PathInfo &opAssign(const PathInfo &in);
	const vec3_t &getPathPoint(uint32 i) const;
}
class spawnflags_t
{
	// funcdefs
	// properties
	// behaviors
	// factories
	// methods
	spawnflags_t opCom() const;
	spawnflags_t opAnd(spawnflags_t) const;
	spawnflags_t opOr(spawnflags_t) const;
	spawnflags_t opXor(spawnflags_t) const;
	spawnflags_t &opAndAssign(spawnflags_t);
	spawnflags_t &opOrAssign(spawnflags_t);
	spawnflags_t &opXorAssign(spawnflags_t);
	uint32 opConv() const;
	bool has(spawnflags_t) const;
	bool has_all(spawnflags_t) const;
}
class shadow_light_data_t
{
	// funcdefs
	// properties
	shadow_light_type_t lighttype;
	float radius;
	int32 resolution;
	float intensity;
	float fade_start;
	float fade_end;
	int32 lightstyle;
	float coneangle;
	vec3_t conedirection;
	// behaviors
	shadow_light_data_t();
	shadow_light_data_t(const shadow_light_data_t&in);
	// factories
	// methods
	shadow_light_data_t &opAssign(const shadow_light_data_t &in);
}

const uint32 gi_tick_rate;
const float gi_frame_time_s;
const uint32 gi_frame_time_ms;
const uint32 max_edicts;
uint32 num_edicts;
const uint32 max_clients;
server_flags_t server_flags;

edict_t @G_EdictForNum(uint32 n);
gclient_t @G_ClientForNum(uint32 n);
trace_t gi_trace(const vec3_t &in start, const vec3_t &in mins, const vec3_t &in maxs, const vec3_t &in end, edict_t @passent, contents_t contentmask) nodiscard;
trace_t gi_traceline(const vec3_t &in start, const vec3_t &in end, edict_t @passent, contents_t contentmask) nodiscard;
trace_t gi_clip(edict_t @entity, const vec3_t &in start, const vec3_t &in mins, const vec3_t &in maxs, const vec3_t &in end, contents_t) nodiscard;
contents_t gi_pointcontents(const vec3_t &in point) nodiscard;
void gi_linkentity(edict_t @ent);
void gi_unlinkentity(edict_t @ent);
void gi_positioned_sound(const vec3_t &in origin, edict_t @ent, uint8 channel, int32 soundindex, float volume, float attenuation, float timeofs);
void gi_sound(edict_t @ent, soundchan_t channel, int32 soundindex, float volume, float attenuation, float timeofs);
void gi_local_sound(edict_t @target, const vec3_t &in origin, edict_t @ent, uint8 channel, int32 soundindex, float volume, float attenuation, float timeofs, uint32 dupe_key);
void gi_local_sound(edict_t @target, edict_t @ent, uint8 channel, int32 soundindex, float volume, float attenuation, float timeofs, uint32 dupe_key);
int32 gi_soundindex(const string &in str);
int32 gi_modelindex(const string &in str);
int32 gi_imageindex(const string &in str);
void gi_WriteByte(int32 c);
void gi_WriteChar(int32 c);
void gi_WriteShort(int32 c);
void gi_WriteLong(int32 c);
void gi_WriteFloat(float f);
void gi_WriteString(const string &in s);
void gi_WritePosition(const vec3_t &in pos);
void gi_WriteDir(const vec3_t &in dir);
void gi_WriteAngle(float f);
void gi_WriteEntity(edict_t @ent);
void gi_multicast(const vec3_t &in origin, multicast_t to, bool reliable);
void gi_unicast(edict_t @ent, bool reliable, uint32 dupe_key);
void gi_Com_Error(const string &in message);
void gi_Com_Error(const string &in fmt, const ? &in ...);
void gi_Com_Print(const string &in message);
void gi_Com_Print(const string &in fmt, const ? &in ...);
void gi_cvar_set(const string &in var_name, const string &in value);
void gi_cvar_forceset(const string &in var_name, const string &in value);
uint32 gi_Info_ValueForKey(const string &in, const string &in, const string &out);
bool gi_Info_SetValueForKey(const string &in, const string &in, const string &in, string &out);
void gi_configstring(int32 num, const string &in str);
string gi_get_configstring(int32 num) nodiscard;
uint32 gi_ServerFrame() nodiscard;
void gi_setmodel(edict_t @ent, const string &in name);
bool gi_inPHS(const vec3_t &in p1, const vec3_t &in p2, bool portals) nodiscard;
bool gi_inPVS(const vec3_t &in p1, const vec3_t &in p2, bool portals) nodiscard;
bool gi_AreasConnected(int32 area1, int32 area2) nodiscard;
uint32 gi_BoxEdicts(const vec3_t &in mins, const vec3_t &in maxs, array<edict_t @> @list, uint32 maxcount, solidity_area_t areatype, BoxEdictsFilter_t @filter, const any @filter_data, bool append);
int32 gi_argc() nodiscard;
const string &gi_args() nodiscard;
const string &gi_argv(int32 n) nodiscard;
void gi_LocClient_Print(edict_t @, print_type_t printlevel, const string &in message);
void gi_LocClient_Print(edict_t @, print_type_t printlevel, const string &in fmt, const ? &in ...);
void gi_Client_Print(edict_t @ent, print_type_t printlevel, const string &in message);
void gi_Client_Print(edict_t @ent, print_type_t printlevel, const string &in fmt, const ? &in ...);
void gi_Center_Print(edict_t @ent, const string &in);
void gi_Center_Print(edict_t @ent, const string &in, const ? &in ...);
void gi_LocCenter_Print(edict_t @ent, const string &in message);
void gi_LocCenter_Print(edict_t @ent, const string &in fmt, const ? &in ...);
void gi_Loc_Print(edict_t @ent, print_type_t printlevel, const string &in base);
void gi_Loc_Print(edict_t @ent, print_type_t printlevel, const string &in base, const ? &in ...);
void gi_LocBroadcast_Print(print_type_t printlevel, const string &in message);
void gi_LocBroadcast_Print(print_type_t printlevel, const string &in fmt, const ? &in ...);
void gi_Broadcast_Print(print_type_t printlevel, const string &in message);
void gi_Broadcast_Print(print_type_t printlevel, const string &in fmt, const ? &in ...);
void gi_SetAreaPortalState(int32 portalnum, bool open);
cvar_t @gi_cvar(const string &in var_name, const string &in value, cvar_flags_t flags);
void gi_AddCommandString(const string &in text);
void gi_AddCommandString(const string &in fmt, const ? &in ...);
void gi_Bot_RegisterEdict(edict_t @);
void gi_Bot_UnRegisterEdict(edict_t @);
void gi_Draw_Line(const vec3_t &in start, const vec3_t &in end, const rgba_t &in color, float lifeTime, bool depthTest);
void gi_Draw_Point(const vec3_t &in point, float size, const rgba_t &in color, float lifeTime, bool depthTest);
void gi_Draw_Circle(const vec3_t &in origin, float size, const rgba_t &in color, float lifeTime, bool depthTest);
void gi_Draw_Bounds(const vec3_t &in mins, const vec3_t &in maxs, const rgba_t &in color, float lifeTime, bool depthTest);
void gi_Draw_Sphere(const vec3_t &in origin, float radius, const rgba_t &in color, float lifeTime, bool depthTest);
void gi_Draw_OrientedWorldText(const vec3_t &in origin, const string &in text, const rgba_t &in color, float size, float lifeTime, bool depthTest);
void gi_Draw_StaticWorldText(const vec3_t &in origin, const vec3_t &in angles, const string &in text, const rgba_t &in color, float size, float lifeTime, bool depthTest);
void gi_Draw_Cylinder(const vec3_t &in origin, float halfHeight, float radius, const rgba_t &in color, float lifeTime, bool depthTest);
void gi_Draw_Arrow(const vec3_t &in start, const vec3_t &in end, float size, const rgba_t &in lineColor, const rgba_t &in arrowColor, float lifeTime, bool depthTest);
void SendToClipBoard(const string &in text);
T @find_by_str<T>(T @from, const string &in member, const string &in value) nodiscard;
bool gi_GetPathToGoal(const PathRequest &in, PathInfo &out);
spawnflags_t spawnflag_dec(uint32);
spawnflags_t spawnflag_bit(uint32);
void gi_SetShadowLightData(uint32, const shadow_light_data_t &in);
void gi_GetShadowLightData(uint32, shadow_light_data_t &out);
void gi_RemoveShadowLightData(int32);

// cgame

enum text_align_t : int32
{
	LEFT = 0,
	CENTER = 1,
	RIGHT = 2
}


class vrect_t
{
	// funcdefs
	// properties
	int32 x;
	int32 y;
	int32 width;
	int32 height;
	// behaviors
	vrect_t(int&in) { repeat int };
	// factories
	// methods
	int32 &opIndex(uint32);
	const int32 &opIndex(uint32) const;
	uint32 size() const;
}
class item_array_t
{
	// funcdefs
	// properties
	// behaviors
	item_array_t(int&in) { repeat int16 };
	// factories
	// methods
	int16 &opIndex(uint32);
	const int16 &opIndex(uint32) const;
	uint32 size() const;
}
class cg_server_data_t
{
	// funcdefs
	// properties
	item_array_t inventory;
	// behaviors
	// factories
	// methods
	string get_layout() const property;
}

float cgi_frame_time_s;
uint32 cgi_frame_time_ms;
uint32 cgi_tick_rate;

cvar_t @cgi_cvar(const string &in, const string &in, cvar_flags_t);
uint64 cgi_CL_ClientRealTime();
uint64 cgi_CL_ClientTime();
bool cgi_CL_FrameValid();
float cgi_CL_FrameTime();
int32 cgi_CL_ServerFrame();
int32 cgi_CL_ServerProtocol();
void cgi_SCR_DrawChar(int32, int32, int32, int32, bool);
void cgi_SCR_SetAltTypeface(bool);
float cgi_SCR_FontLineHeight(int32);
int32 cgi_CL_GetWarnAmmoCount(int32);
bool cgi_CL_InAutoDemoLoop();
string cgi_get_configstring(uint16);
bool cgi_Draw_RegisterPic(const string &in);
void cgi_Draw_GetPicSize(int32 &out, int32 &out, const string &in);
void cgi_SCR_DrawPic(int32, int32, int32, int32, const string &in);
void cgi_SCR_DrawColorPic(int32, int32, int32, int32, const string &in, rgba_t);
void cgi_SCR_DrawFontString(const string &in, int32, int32, int32, rgba_t, bool, text_align_t);
vec2_t cgi_SCR_MeasureFontString(const string &in, int32);
void cgi_Com_Error(const string &in);
void cgi_Com_Print(const string &in);
void cgi_Com_Error(const string &in, const ? &in ...);
void cgi_Com_Print(const string &in, const ? &in ...);
string cgi_Localize(const string &in);
string cgi_Localize(const string &in, const string &in ...);
int32 cgi_SCR_DrawBind(int32, const string &in, const string &in, int32, int32, int32);
bool cgi_CL_GetTextInput(string &out, bool &out);
string cgi_CL_GetClientName(int32);
string cgi_CL_GetClientDogtag(int32);